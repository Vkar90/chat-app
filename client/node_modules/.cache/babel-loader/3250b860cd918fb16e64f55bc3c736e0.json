{"ast":null,"code":"var _jsxFileName = \"/Users/VKardamitsis/Projects/chat-app/client/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToConversation({\n    recipients,\n    text,\n    sender\n  }) {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }\n\n  function sendMessage(recipients, text) {\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"frxG0vNanNUFc6I1iBMQPd4tbqE=\", true, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/Users/VKardamitsis/Projects/chat-app/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","useSocket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","sendMessage","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\nconst {contacts} = useContacts()\nconst socket = useSocket()\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, { recipients, messages: [] }]\n    })\n  }\n\n  function addMessageToConversation({recipients, text, sender }) {\n      setConversations(prevConversations => {\n        let madeChange = false\n        const newMessage = { sender, text}\n        const newConversations = prevConversations.map(conversation => {\n          if (arrayEquality(conversation.recipients, recipients)){\n            madeChange = true\n            return {\n              ...conversation,\n              messages: [...conversation.messages, newMessage]\n            }\n          }\n          return conversation\n        })\n\n        if(madeChange){\n          return newConversations\n        }else{\n          return [\n            ...prevConversations, \n            {recipients, messages: [newMessage]}]\n        }\n      })\n  }\n\n  function sendMessage(recipients, text) {\n    addMessageToConversation({recipients, text, sender: id})\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n      const recipients = conversation.recipients.map(recipient => {\n          const contact = contacts.find(contact => {\n              return contact.id === recipient\n          })\n          const name = (contact && contact.name) || recipient\n          return { id: recipient, name }\n      })\n\n      const messages = conversation.messages.map(message => {\n        const contact = contacts.find(contact => {\n          return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return {...message, senderName: name, fromMe}\n    })\n     \n\n      const selected  = index === selectedConversationIndex\n      return { ...conversation, messages, recipients, selected }\n  })\n\n  const value = {\n      conversations: formattedConversations, \n      selectedConversation: formattedConversations[selectedConversationIndex],\n      sendMessage,\n      selectConversationIndex: setSelectedConversationIndex,\n      createConversation\n  }\n\n  return (\n    <ConversationsContext.Provider value={value}>\n        {children}\n    </ConversationsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length)return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}"]},"metadata":{},"sourceType":"module"}