{"ast":null,"code":"var _jsxFileName = \"/Users/VKardamitsis/Projects/chat-app/client/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToConversation({\n    recipients,\n    text,\n    sender\n  }) {}\n\n  function sendMessage(recipients, text) {\n    addMessageToConversation({\n      recipients\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"A7rfBETu6KN1Q21Ig/5PWBuEG9I=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/Users/VKardamitsis/Projects/chat-app/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","sendMessage","formattedConversations","map","conversation","index","recipient","contact","find","name","selected","value","selectedConversation","selectConversationIndex"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGL,KAAK,CAACM,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAON,UAAU,CAACI,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAA/B,EAAiD;AAAA;;AACtD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAzD;AACA,QAAM,CAACU,yBAAD,EAA4BC,4BAA5B,IAA4DZ,QAAQ,CAAC,CAAD,CAA1E;AACF,QAAM;AAACa,IAAAA;AAAD,MAAaX,WAAW,EAA9B;;AAEE,WAASY,kBAAT,CAA4BC,UAA5B,EAAwC;AACtCL,IAAAA,gBAAgB,CAACM,iBAAiB,IAAI;AACpC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAE;AAAxB,OAAvB,CAAP;AACD,KAFe,CAAhB;AAGD;;AAED,WAASC,wBAAT,CAAkC;AAACH,IAAAA,UAAD;AAAaI,IAAAA,IAAb;AAAmBC,IAAAA;AAAnB,GAAlC,EAA+D,CAE9D;;AAED,WAASC,WAAT,CAAqBN,UAArB,EAAiCI,IAAjC,EAAuC;AACrCD,IAAAA,wBAAwB,CAAC;AAACH,MAAAA;AAAD,KAAD,CAAxB;AACD;;AAED,QAAMO,sBAAsB,GAAGb,aAAa,CAACc,GAAd,CAAkB,CAACC,YAAD,EAAeC,KAAf,KAAyB;AACtE,UAAMV,UAAU,GAAGS,YAAY,CAACT,UAAb,CAAwBQ,GAAxB,CAA4BG,SAAS,IAAI;AACxD,YAAMC,OAAO,GAAGd,QAAQ,CAACe,IAAT,CAAcD,OAAO,IAAI;AACrC,eAAOA,OAAO,CAACpB,EAAR,KAAemB,SAAtB;AACH,OAFe,CAAhB;AAGA,YAAMG,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6BH,SAA1C;AACA,aAAO;AAAEnB,QAAAA,EAAE,EAAEmB,SAAN;AAAiBG,QAAAA;AAAjB,OAAP;AACH,KANkB,CAAnB;AAOA,UAAMC,QAAQ,GAAIL,KAAK,KAAKd,yBAA5B;AACA,WAAO,EAAE,GAAGa,YAAL;AAAmBT,MAAAA,UAAnB;AAA+Be,MAAAA;AAA/B,KAAP;AACH,GAV8B,CAA/B;AAYA,QAAMC,KAAK,GAAG;AACVtB,IAAAA,aAAa,EAAEa,sBADL;AAEVU,IAAAA,oBAAoB,EAAEV,sBAAsB,CAACX,yBAAD,CAFlC;AAGVsB,IAAAA,uBAAuB,EAAErB,4BAHf;AAIVE,IAAAA;AAJU,GAAd;AAOA,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEiB,KAAtC;AAAA,cACKvB;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IA3CeF,qB;UAC4BL,e,EAEzBC,W;;;KAHHI,qB","sourcesContent":["import React, { useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\nconst {contacts} = useContacts()\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, { recipients, messages: [] }]\n    })\n  }\n\n  function addMessageToConversation({recipients, text, sender }) {\n\n  }\n\n  function sendMessage(recipients, text) {\n    addMessageToConversation({recipients})\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n      const recipients = conversation.recipients.map(recipient => {\n          const contact = contacts.find(contact => {\n              return contact.id === recipient\n          })\n          const name = (contact && contact.name) || recipient\n          return { id: recipient, name }\n      })\n      const selected  = index === selectedConversationIndex\n      return { ...conversation, recipients, selected }\n  })\n\n  const value = {\n      conversations: formattedConversations, \n      selectedConversation: formattedConversations[selectedConversationIndex],\n      selectConversationIndex: setSelectedConversationIndex,\n      createConversation\n  }\n\n  return (\n    <ConversationsContext.Provider value={value}>\n        {children}\n    </ConversationsContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}