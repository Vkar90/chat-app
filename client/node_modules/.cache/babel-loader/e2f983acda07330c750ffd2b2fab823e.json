{"ast":null,"code":"var _jsxFileName = \"/Users/VKardamitsis/Projects/chat-app/client/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  idchildren\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const formattedConversations = conversations.map(conversation => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    return { ...conversation,\n      recipients\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"ZDHhzHN1113Jm3JCTanYzXIAYqc=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/Users/VKardamitsis/Projects/chat-app/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","idchildren","conversations","setConversations","contacts","createConversation","recipients","prevConversations","messages","formattedConversations","map","conversation","recipient","contact","find","id","name","value","children"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGJ,KAAK,CAACK,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAOL,UAAU,CAACG,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA+C;AAAA;;AACpD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAzD;AAEA,QAAM;AAACS,IAAAA;AAAD,MAAaR,WAAW,EAA9B;;AAEA,WAASS,kBAAT,CAA4BC,UAA5B,EAAwC;AACtCH,IAAAA,gBAAgB,CAACI,iBAAiB,IAAI;AACpC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAE;AAAxB,OAAvB,CAAP;AACD,KAFe,CAAhB;AAGD;;AAED,QAAMC,sBAAsB,GAAGP,aAAa,CAACQ,GAAd,CAAkBC,YAAY,IAAI;AAC7D,UAAML,UAAU,GAAGK,YAAY,CAACL,UAAb,CAAwBI,GAAxB,CAA4BE,SAAS,IAAI;AACxD,YAAMC,OAAO,GAAGT,QAAQ,CAACU,IAAT,CAAcD,OAAO,IAAI;AACrC,eAAOA,OAAO,CAACE,EAAR,KAAeH,SAAtB;AACH,OAFe,CAAhB;AAGA,YAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,SAA1C;AACA,aAAO;AAAEG,QAAAA,EAAE,EAAEH,SAAN;AAAiBI,QAAAA;AAAjB,OAAP;AACH,KANkB,CAAnB;AAQA,WAAO,EAAE,GAAGL,YAAL;AAAmBL,MAAAA;AAAnB,KAAP;AACH,GAV8B,CAA/B;AAYA,QAAMW,KAAK,GAAG;AACVf,IAAAA,aAAa,EAAEO,sBADL;AAC6BJ,IAAAA;AAD7B,GAAd;AAIA,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEY,KAAtC;AAAA,cACKC;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAhCelB,qB;UAC4BL,e,EAEvBC,W;;;KAHLI,qB","sourcesContent":["import React, { useContext } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ idchildren }) {\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n\n  const {contacts} = useContacts()\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, { recipients, messages: [] }]\n    })\n  }\n\n  const formattedConversations = conversations.map(conversation => {\n      const recipients = conversation.recipients.map(recipient => {\n          const contact = contacts.find(contact => {\n              return contact.id === recipient\n          })\n          const name = (contact && contact.name) || recipient\n          return { id: recipient, name }\n      })\n\n      return { ...conversation, recipients }\n  })\n\n  const value = {\n      conversations: formattedConversations, createConversation\n  }\n\n  return (\n    <ConversationsContext.Provider value={value}>\n        {children}\n    </ConversationsContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}